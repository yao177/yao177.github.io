<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="551px" preserveAspectRatio="none" style="width:1195px;height:551px;background:#FFFFFF;" version="1.1" viewBox="0 0 1195 551" width="1195px" zoomAndPan="magnify"><defs><filter height="300%" id="f1rvnhxp51sk7q" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><ellipse cx="1019" cy="20" fill="#000000" filter="url(#f1rvnhxp51sk7q)" rx="10" ry="10" style="stroke:none;stroke-width:1.0;"/><rect fill="#FEFECE" filter="url(#f1rvnhxp51sk7q)" height="34.1328" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="318" x="860" y="50"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="298" x="870" y="71.6016">ConfigurableApplicationContext#refresh be invoked</text><path d="M170,94.1328 L170,150.0645 A0,0 0 0 0 170,150.0645 L943,150.0645 A0,0 0 0 0 943,150.0645 L943,126.0986 L963,122.0986 L943,118.0986 L943,104.1328 L933,94.1328 L170,94.1328 A0,0 0 0 0 170,94.1328 " fill="#FBFB77" filter="url(#f1rvnhxp51sk7q)" style="stroke:#A80036;stroke-width:1.0;"/><path d="M933,94.1328 L933,104.1328 L943,104.1328 L933,94.1328 " fill="#FBFB77" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="140" x="176" y="111.7012">创建BeanFactory实例；</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="752" x="176" y="127.0117">执行AbstractRefreshableApplicationContext#loadBeanDefinition，用于扫描程序包中的Bean定义，并记录在BeanFactory中；</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="260" x="176" y="142.3223">注册各类处理器（如BeanPostProcessor）。</text><rect fill="#FEFECE" filter="url(#f1rvnhxp51sk7q)" height="34.1328" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="112" x="963" y="105.0322"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="92" x="973" y="126.6338">创建 Spring 容器</text><path d="M343,166.8203 L343,207.4414 A0,0 0 0 0 343,207.4414 L929,207.4414 A0,0 0 0 0 929,207.4414 L929,191.1309 L949,187.1309 L929,183.1309 L929,176.8203 L919,166.8203 L343,166.8203 A0,0 0 0 0 343,166.8203 " fill="#FBFB77" filter="url(#f1rvnhxp51sk7q)" style="stroke:#A80036;stroke-width:1.0;"/><path d="M919,166.8203 L919,176.8203 L929,176.8203 L919,166.8203 " fill="#FBFB77" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="565" x="349" y="184.3887">DefaultListableBeanFactory#preInstantiateSingletons从BeanFactory中获取所有Bean的名称；</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="535" x="349" y="199.6992">该循环依次调用BeanFactory#getBean方法，该方法会让BeanFactory中没有的Bean被创建。</text><rect fill="#FEFECE" filter="url(#f1rvnhxp51sk7q)" height="34.1328" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="140" x="949" y="170.0645"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="120" x="959" y="191.666">遍历所有 Bean 的名称</text><path d="M276,275.8525 L276,301.1631 A0,0 0 0 0 276,301.1631 L899,301.1631 A0,0 0 0 0 899,301.1631 L899,293.8525 L919,288.5078 L899,285.8525 L899,285.8525 L889,275.8525 L276,275.8525 A0,0 0 0 0 276,275.8525 " fill="#FBFB77" filter="url(#f1rvnhxp51sk7q)" style="stroke:#A80036;stroke-width:1.0;"/><path d="M889,275.8525 L889,285.8525 L899,285.8525 L889,275.8525 " fill="#FBFB77" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="602" x="282" y="293.4209">实际调用的是AbstractAutowireCapableBeanFactory#populate方法，根据Bean的定义创建Bean实例。</text><rect fill="#FEFECE" filter="url(#f1rvnhxp51sk7q)" height="34.1328" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="200" x="919" y="271.4414"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="180" x="929" y="293.043">根据 Bean 的定义创建 Bean 实例</text><path d="M143,329.8301 L143,370.4512 A0,0 0 0 0 143,370.4512 L875,370.4512 A0,0 0 0 0 875,370.4512 L875,354.1406 L895,350.1406 L875,346.1406 L875,339.8301 L865,329.8301 L143,329.8301 A0,0 0 0 0 143,329.8301 " fill="#FBFB77" filter="url(#f1rvnhxp51sk7q)" style="stroke:#A80036;stroke-width:1.0;"/><path d="M865,329.8301 L865,339.8301 L875,339.8301 L865,329.8301 " fill="#FBFB77" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="669" x="149" y="347.3984">根据Bean定义中的实例化方法(通常为无参构造函数)创建bean实例，并按照bean的定义设置各个属性值并解决依赖；</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="711" x="149" y="362.709">这一步会触发InstantiationAwareBeanPostProcessor#postProcessPropertyValues方法，以此实现依赖注入的真正过程。</text><rect fill="#FEFECE" filter="url(#f1rvnhxp51sk7q)" height="34.1328" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="248" x="895" y="333.0742"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="228" x="905" y="354.6758">创建并注入所有依赖的 Bean 设置各个属性</text><polygon fill="#FEFECE" filter="url(#f1rvnhxp51sk7q)" points="1019,227.4414,1031,239.4414,1019,251.4414,1007,239.4414,1019,227.4414" style="stroke:#A80036;stroke-width:1.5;"/><polygon fill="#FEFECE" filter="url(#f1rvnhxp51sk7q)" points="980.5,390.4512,1057.5,390.4512,1069.5,402.4512,1057.5,414.4512,980.5,414.4512,968.5,402.4512,980.5,390.4512" style="stroke:#A80036;stroke-width:1.5;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="66" x="1023" y="425.0859">依赖解决完毕</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="77" x="980.5" y="406.6084">仍有依赖未加载</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="77" x="1069.5" y="400.1309">注入下一个依赖</text><path d="M10,436.5859 L10,492.5176 A0,0 0 0 0 10,492.5176 L955,492.5176 A0,0 0 0 0 955,492.5176 L955,468.5518 L975,464.5518 L955,460.5518 L955,446.5859 L945,436.5859 L10,436.5859 A0,0 0 0 0 10,436.5859 " fill="#FBFB77" filter="url(#f1rvnhxp51sk7q)" style="stroke:#A80036;stroke-width:1.0;"/><path d="M945,436.5859 L945,446.5859 L955,446.5859 L945,436.5859 " fill="#FBFB77" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="624" x="16" y="454.1543">Bean初始化前会先触发所有的BeanPostProcessor#postProcessBeforeInitialization对Bean进行前置处理；</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="924" x="16" y="469.4648">在其后会执行Bean的所有初始化方法(依次为@PostConstruct注解标记的方法、重写InitializingBean的afterPropertiesSet方法、XML中指定的init-method）。</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="613" x="16" y="484.7754">在初始化方法完成后，会执行BeanPostProcessorpost#ProcessAfterInitialization对Bean进行后置处理。</text><rect fill="#FEFECE" filter="url(#f1rvnhxp51sk7q)" height="34.1328" rx="12.5" ry="12.5" style="stroke:#A80036;stroke-width:1.5;" width="88" x="975" y="447.4854"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="68" x="985" y="469.0869">Bean 初始化</text><ellipse cx="1019" cy="523.5176" fill="#FFFFFF" filter="url(#f1rvnhxp51sk7q)" rx="11" ry="11" style="stroke:#000000;stroke-width:1.0;"/><ellipse cx="1019" cy="523.5176" fill="#000000" rx="6" ry="6" style="stroke:#7F7F7F;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.5;" x1="1019" x2="1019" y1="30" y2="50"/><polygon fill="#A80036" points="1015,40,1019,50,1023,40,1019,44" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.5;" x1="1019" x2="1019" y1="84.1328" y2="105.0322"/><polygon fill="#A80036" points="1015,95.0322,1019,105.0322,1023,95.0322,1019,99.0322" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.5;" x1="1019" x2="1019" y1="139.165" y2="170.0645"/><polygon fill="#A80036" points="1015,160.0645,1019,170.0645,1023,160.0645,1019,164.0645" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.5;" x1="1019" x2="1019" y1="305.5742" y2="333.0742"/><polygon fill="#A80036" points="1015,323.0742,1019,333.0742,1023,323.0742,1019,327.0742" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.5;" x1="1019" x2="1019" y1="251.4414" y2="271.4414"/><polygon fill="#A80036" points="1015,261.4414,1019,271.4414,1023,261.4414,1019,265.4414" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.5;" x1="1069.5" x2="1155" y1="402.4512" y2="402.4512"/><polygon fill="#A80036" points="1151,325.5742,1155,315.5742,1159,325.5742,1155,321.5742" style="stroke:#A80036;stroke-width:1.5;"/><line style="stroke:#A80036;stroke-width:1.5;" x1="1155" x2="1155" y1="239.4414" y2="402.4512"/><line style="stroke:#A80036;stroke-width:1.5;" x1="1155" x2="1031" y1="239.4414" y2="239.4414"/><polygon fill="#A80036" points="1041,235.4414,1031,239.4414,1041,243.4414,1037,239.4414" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.5;" x1="1019" x2="1019" y1="367.207" y2="390.4512"/><polygon fill="#A80036" points="1015,380.4512,1019,390.4512,1023,380.4512,1019,384.4512" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.5;" x1="1019" x2="1019" y1="204.1973" y2="227.4414"/><polygon fill="#A80036" points="1015,217.4414,1019,227.4414,1023,217.4414,1019,221.4414" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.5;" x1="1019" x2="1019" y1="414.4512" y2="447.4854"/><polygon fill="#A80036" points="1015,437.4854,1019,447.4854,1023,437.4854,1019,441.4854" style="stroke:#A80036;stroke-width:1.0;"/><line style="stroke:#A80036;stroke-width:1.5;" x1="1019" x2="1019" y1="481.6182" y2="512.5176"/><polygon fill="#A80036" points="1015,502.5176,1019,512.5176,1023,502.5176,1019,506.5176" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[947d1c6c3a9ed27fe9eb159791c3ca51]
@startuml Spring 启动流程
start
:ConfigurableApplicationContext#refresh be invoked;
:创建 Spring 容器;
note left
创建BeanFactory实例；
执行AbstractRefreshableApplicationContext#loadBeanDefinition，用于扫描程序包中的Bean定义，并记录在BeanFactory中；
注册各类处理器（如BeanPostProcessor）。
end note
:遍历所有 Bean 的名称;
note left
DefaultListableBeanFactory#preInstantiateSingletons从BeanFactory中获取所有Bean的名称；
该循环依次调用BeanFactory#getBean方法，该方法会让BeanFactory中没有的Bean被创建。
end note
repeat
:根据 Bean 的定义创建 Bean 实例;
note left
实际调用的是AbstractAutowireCapableBeanFactory#populate方法，根据Bean的定义创建Bean实例。
end note
:创建并注入所有依赖的 Bean 设置各个属性;
note left
根据Bean定义中的实例化方法(通常为无参构造函数)创建bean实例，并按照bean的定义设置各个属性值并解决依赖；
这一步会触发InstantiationAwareBeanPostProcessor#postProcessPropertyValues方法，以此实现依赖注入的真正过程。
end note
repeat while (仍有依赖未加载) is (注入下一个依赖) not (依赖解决完毕)
:Bean 初始化;
note left
Bean初始化前会先触发所有的BeanPostProcessor#postProcessBeforeInitialization对Bean进行前置处理；
在其后会执行Bean的所有初始化方法(依次为@PostConstruct注解标记的方法、重写InitializingBean的afterPropertiesSet方法、XML中指定的init-method）。
在初始化方法完成后，会执行BeanPostProcessorpost#ProcessAfterInitialization对Bean进行后置处理。
end note
stop
@enduml

PlantUML version 1.2022.0(Wed Jan 12 00:16:42 CST 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: zh
Country: CN
--></g></svg>